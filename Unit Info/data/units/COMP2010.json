{
  "data": {
    "grading_schema": {
      "label": "Graded",
      "value": "graded"
    },
    "study_level": {},
    "quota_enrolment_requirements": "",
    "exclusions": "",
    "level": {
      "value": "2000"
    },
    "uac_code": "",
    "special_requirements": "",
    "special_unit_type": [
      {
        "label": "Undergraduate",
        "value": "undergrad"
      }
    ],
    "version_status": {
      "label": "Approved",
      "value": "Active"
    },
    "special_topic": false,
    "asced_broad": {
      "value": ""
    },
    "placement_proportion": {
      "label": "No",
      "value": "no"
    },
    "unit_description": [],
    "unit_learning_outcomes": [
      {
        "description": "Describe the results of analysing algorithms.",
        "code": "ULO5"
      },
      {
        "description": "Apply strategies for achieving correctness in a range of algorithms.",
        "code": "ULO2"
      },
      {
        "description": "Demonstrate an understanding of a variety of algorithm design techniques and  how they can improve either efficiency or clarity.",
        "code": "ULO1"
      },
      {
        "description": "Carry-out advanced and broadly based problem solving, particularly when designing and writing programs to meet a given specification.",
        "code": "ULO4"
      },
      {
        "description": "Apply commonly used data structures, including trees, graphs, lists and their variations.",
        "code": "ULO3"
      }
    ],
    "non_scheduled_learning_activities": [
      {
        "description": "Pre and post-lecture reading and practice exercises.",
        "activity": {
          "label": "Class Preparation",
          "value": "class_preparation"
        },
        "offerings": ""
      }
    ],
    "enrolment_rules": [
      {
        "description": "(COMP1010 or COMP125) and 10cp from (MATH132-MATH136 or DMTH137 or MATH1007-MATH1025 or (STAT150 or STAT1250) or (STAT170 or STAT1170) or (STAT171 or STAT1371) or (STAT175 or STAT1175))",
        "type": {
          "label": "Pre-requisite",
          "value": "prerequisite"
        }
      },
      {
        "description": "COMP225",
        "type": {
          "label": "NCCW (pre-2020 units)",
          "value": "nccw"
        }
      }
    ],
    "assessments": [
      {
        "assessment_title": "Assignment One",
        "type": {
          "label": "Programming Task",
          "value": "programming_task"
        },
        "weight": "15",
        "description": "In this assignment you will be asked to design and analyse an algorithm based on material studied in weeks 1--5. Your algorithm will be implemented in the Java programming language using some of the design techniques taught in lectures and the weekly exercises. The focus is on correctness and the ability to write programs on list or tree data structures.",
        "applies_to_all_offerings": "No",
        "hurdle_task": "No",
        "offerings": "",
        "individual": {
          "label": "",
          "value": ""
        }
      },
      {
        "assessment_title": "Final Exam",
        "type": {
          "label": "Examination",
          "value": "exam"
        },
        "weight": "45",
        "description": "A formal written examination based on lectures, class work, activities, and assignments.",
        "applies_to_all_offerings": "No",
        "hurdle_task": "No",
        "offerings": "",
        "individual": {
          "label": "",
          "value": ""
        }
      },
      {
        "assessment_title": "Weekly Exercises",
        "type": {
          "label": "Programming Task",
          "value": "programming_task"
        },
        "weight": "5",
        "description": "Each week you will be asked to submit the solutions to problems based on lecture material.",
        "applies_to_all_offerings": "No",
        "hurdle_task": "No",
        "offerings": "",
        "individual": {
          "label": "",
          "value": ""
        }
      },
      {
        "assessment_title": "Contribution to Learning",
        "type": {
          "label": "Participatory task",
          "value": "participatory_task"
        },
        "weight": "5",
        "description": "The participation assessment encourages active and consistent engagement in COMP2010 content. There are two ways to obtain marks. (a) Attend a weekly workshop and complete additional participation exercises (0.5 mark from the tutor at the workshop). (b) Good citizenship eg consistent posting useful comments and contributions related to the material on the forum. Only tutors may nominate students for good citizenship participation (b), and the lecturers will be happy to consider such nominations.",
        "applies_to_all_offerings": "No",
        "hurdle_task": "No",
        "offerings": "",
        "individual": {
          "label": "",
          "value": ""
        }
      },
      {
        "assessment_title": "Assignment Two",
        "type": {
          "label": "Programming Task",
          "value": "programming_task"
        },
        "weight": "20",
        "description": "You will be asked to design and implement an algorithm in Java based on graph data structures using some of the more advanced techniques discussed in lectures.",
        "applies_to_all_offerings": "No",
        "hurdle_task": "No",
        "offerings": "",
        "individual": {
          "label": "",
          "value": ""
        }
      },
      {
        "assessment_title": "Mid semester test",
        "type": {
          "label": "Quiz/Test",
          "value": "quiz_test"
        },
        "weight": "10",
        "description": "Mid semester test based on tutorial questions in weeks 1--9. This will be delivered as an iLearn Quiz.",
        "applies_to_all_offerings": "No",
        "hurdle_task": "No",
        "offerings": "",
        "individual": {
          "label": "",
          "value": ""
        }
      }
    ],
    "requisites": [],
    "unit_offering": [
      {
        "publish": "true",
        "name": "COMP2010-unit_teaching_period-Special",
        "display_name": "Session 1-Special",
        "teaching_period": {
          "value": "Session 1"
        },
        "attendance_mode": {
          "value": "Special circumstances"
        },
        "quota_number": "",
        "study_level": {},
        "academic_item": {
          "value": "COMP2010"
        }
      },
      {
        "publish": "true",
        "name": "COMP2010-unit_teaching_period-Weekday-subject",
        "display_name": "Session 1-Weekday-North Ryde",
        "teaching_period": {
          "value": "Session 1"
        },
        "attendance_mode": {
          "value": "Weekday attendance"
        },
        "quota_number": "",
        "study_level": {},
        "academic_item": {
          "value": "COMP2010"
        }
      }
    ],
    "unit_offering_text": "Session 1, Weekday attendance, North Ryde<br />Session 1, Special circumstances<br />",
    "subject_search_title": "COMP2010 - Algorithms and Data Structures",
    "status": {
      "label": "Approved",
      "value": "Active"
    },
    "academic_org": {
      "value": "Department of Computing "
    },
    "school": {
      "value": "Faculty of Science and Engineering"
    },
    "credit_points": "10",
    "type": {
      "label": "",
      "value": "non_pace"
    },
    "description": "This unit provides a study of algorithms, data structures and programming techniques. The topics covered include: trees; graphs and heaps; advanced sorting techniques; elements of storage management; and complexity. The presentation emphasises the role of data abstraction and correctness proofs.",
    "search_title": "COMP2010 - Algorithms and Data Structures",
    "code": "COMP2010",
    "title": "Algorithms and Data Structures",
    "content_type": "Unit",
    "credit_points_header": "10 credit points"
  },
  "creditPoints": 10,
  "description": "This unit provides a study of algorithms, data structures and programming techniques. The topics covered include: trees; graphs and heaps; advanced sorting techniques; elements of storage management; and complexity. The presentation emphasises the role of data abstraction and correctness proofs.",
  "level": "2000",
  "publishedInHandbook": 1,
  "levelDisplay": "Unit",
  "effectiveDate": "2021-01-01T00:00:00",
  "status": "Active",
  "modDate": "2020-12-07T09:51:43.719",
  "code": "COMP2010",
  "title": "Algorithms and Data Structures",
  "implementationYear": "2021"
}